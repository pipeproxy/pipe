// Code generated by go-bindata.
// sources:
// template.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x41\x6f\xea\x38\x10\x3e\xdb\xbf\x62\x1a\xa1\x55\xf2\x94\xfa\x69\xaf\x48\x1c\x9e\x60\x5f\x55\xa9\x4b\x51\xb7\xea\x1e\xaa\x8a\x46\x89\x13\xb2\x10\x1b\x25\x66\x97\xca\xca\x7f\x5f\x8d\x6d\xc0\x40\x80\x52\xbd\x13\x66\xec\x99\xf9\xe6\xfb\x86\x19\xbe\x7f\x87\xd1\x23\x8c\x1f\x9f\xe1\x8f\xd1\xfd\xf3\x0d\x0c\x65\xc6\xa1\xe0\x82\xd7\x89\xe2\x19\xa3\xcb\x24\x9d\x27\x05\x07\xad\x81\x4d\xe6\xc5\x38\xa9\x38\xb4\x2d\xa5\x65\xb5\x94\xb5\x82\x90\x12\xad\xa1\x4e\x44\xc1\x81\xdd\x1b\x5b\x83\xf7\x44\xeb\x5b\x60\x3f\x16\x65\x82\x5f\x21\x70\xee\x93\x44\xcd\xa0\x6d\x03\xe3\xc5\x45\x86\x4f\x23\x4a\xf3\x95\x48\xa1\x14\xa5\x0a\x23\xd0\x94\xd4\xbc\x28\x1b\xc5\x6b\xf6\xe4\x0e\x61\x50\xf3\x3c\x88\x61\xcc\xff\xc3\x40\xcf\x1f\x4b\x04\xf1\xc4\xf3\xbf\x4b\x35\x1b\x4a\x91\x97\x45\xd4\xe9\x96\x75\xb8\x8d\x2e\xbb\x09\x29\x78\x10\x83\xd8\xf3\x1b\x4b\xc1\x23\xda\x52\xaa\x35\xf4\x8c\xad\x3f\xd8\x5e\x1a\xe3\x64\x5e\x18\x1b\x7e\x22\x47\x0a\xef\x6c\x1e\x68\x54\xbd\x4a\x15\x56\x67\x28\x6c\x54\x5d\x8a\x82\x92\x11\xcf\x61\xc3\x2d\xb4\x2d\xf3\xf2\xc1\xfb\x3f\x8d\x14\xfd\x20\x96\x55\xa9\x78\xb5\x54\x1f\xc1\x3b\xa6\x37\x64\x9d\x61\x22\x4c\xd5\x1a\x52\x29\x14\x5f\x2b\x36\xb4\x9f\x31\x1a\x72\xf8\xe6\x8a\x3e\x95\x51\x53\x22\xb1\x82\xdf\x3c\xa3\xa6\xc4\x40\xee\x9b\x10\x0c\x8f\x31\x25\x08\xbc\x0f\xd6\x34\xe2\x39\x5a\x86\x6a\x8d\x16\xb5\x8e\x29\x69\x91\x56\xb5\xaa\x05\xc8\x13\x90\x47\xbf\x0e\xb2\xcb\xe4\x59\x27\x2b\x85\x21\x63\x0f\xf2\x16\x6a\xb4\x05\x74\xec\x70\x8c\x41\xec\xc4\x8a\x21\xe3\xf9\x09\x18\xe7\xe0\x95\xb9\x71\x1c\x0c\x40\x94\x0b\x34\x74\x00\xc6\xde\x42\xd6\x28\xa9\x62\x90\x73\xd4\x20\x55\xeb\x34\x49\x67\x9c\xdd\x71\x35\xc4\x83\xa3\x0b\x71\x21\xd6\xc8\x44\xbe\x91\xf3\x0b\x21\x49\xa3\x64\xcd\x63\x98\x62\xd0\x8a\x3d\xc8\x24\x7b\xac\xff\x42\x5b\x18\x74\x83\x0e\x62\xa8\x92\xe5\xab\xad\xfa\xad\xfb\x8d\x6e\x23\x17\x99\x85\x17\x1f\x47\xaf\x48\xe3\x1b\x0c\x90\x88\xad\x5e\x78\xee\x90\xe2\x8e\x7f\x52\x8a\x64\xb5\x50\xcd\x17\xf4\xb8\x92\x61\x47\xb0\x63\xd1\x7a\x5a\x1a\x4f\xf2\x17\x51\xe2\x79\x12\xb9\x71\xbb\x92\x2f\xf4\xf5\xc2\xec\x7e\x51\x84\x90\x16\x00\x28\x41\x79\xb1\x69\x6c\x8b\x59\x42\x6e\x8e\xfa\x6c\x73\x65\xba\x61\x21\x8b\x82\xd7\xec\x67\x2d\x2b\xbf\x54\xf6\x12\xde\xfe\x1e\xb1\x7b\x91\x4b\x53\x56\x6f\x87\xaa\xb7\xe1\xae\x6c\x40\x48\x85\xe1\x4a\xc1\xb3\x20\x86\x00\x61\x06\x56\x99\xa8\xeb\x77\x68\x7a\xb0\xa5\xf4\xdf\xa4\x3e\x34\xc3\xf4\xf0\x9d\x1d\x97\x87\x66\x37\x38\xf5\xa6\x53\x8e\x67\x72\x78\xdd\x6c\xd8\x60\xda\xad\xad\x3f\xb9\x9a\xc9\xcc\xac\x2d\x93\x22\x9c\x7a\x55\x9b\xa9\x6f\xfc\x7f\xae\x44\xea\xd6\x5f\x68\xf7\x9b\xf3\xff\x51\x17\x0d\xdc\xe2\xd2\x23\x53\x3f\x53\x6c\x5f\xe1\x9a\x33\xb7\x11\xec\xfb\x3d\xf1\xc6\x28\x66\x5d\xb5\x86\x32\x07\xf6\x92\x2c\x56\x16\xbc\x06\xe6\xd2\xe1\x99\x2f\x1a\x73\x34\x19\xec\xe6\x3c\x9f\x4b\x6f\xb5\x7e\x90\xc5\x9e\xbc\x6a\x56\x36\x56\x4c\xc1\x41\x9a\x91\xd6\x21\x37\x76\xf1\x8e\xa3\x0d\x56\xbb\xda\x4f\x23\x1d\x98\x6f\xfe\x95\xdb\xf2\xde\xc2\x77\xa2\x50\xb3\x34\x9d\xcd\x8a\xef\x8b\x77\xfd\xc2\xa4\xb8\x82\xe0\x70\x70\x5c\xd0\x5a\xc2\x37\xaf\xe8\xcf\x2b\x6d\xfe\xdf\x78\xfa\x7c\x59\xf4\xb3\x0a\x3a\xaa\x77\xec\x5b\xea\xf6\x5a\xa0\xe7\x0d\x4e\xc9\x86\xb8\xf6\xa4\xdb\x79\xd2\x2c\x3c\xf6\x95\x9a\x8e\xe0\xf8\x72\xfd\x1f\x00\x00\xff\xff\x2b\x66\xdd\x35\x35\x0a\x00\x00"

func templateGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templateGoTpl,
		"template.go.tpl",
	)
}

func templateGoTpl() (*asset, error) {
	bytes, err := templateGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.go.tpl", size: 2613, mode: os.FileMode(420), modTime: time.Unix(1605877639, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.go.tpl": templateGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.go.tpl": &bintree{templateGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

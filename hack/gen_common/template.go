// Code generated by go-bindata.
// sources:
// template.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xd1\x6f\xda\x3e\x10\x7e\xb6\xff\x8a\x6b\x54\xfd\x94\x54\xa9\xfb\x8e\xc4\x43\x05\xbf\x55\x95\x36\x8a\xba\x6a\x7d\xa8\x2a\x1a\x05\x27\x64\x80\x8d\x1c\xb3\x51\x59\xf9\xdf\xa7\x73\x9c\xe0\x42\x28\xa3\xdb\xfa\x12\xf7\xec\xbb\xfb\xee\xfb\xec\x3b\xae\xae\x60\x78\x07\xa3\xbb\x07\xf8\x7f\x78\xfb\x70\x06\x03\x39\xe5\x90\x73\xc1\x55\xa2\xf9\x94\xd1\x55\x92\xce\x93\x9c\x83\x31\xc0\xc6\xf3\x7c\x94\x2c\x39\x54\x15\xa5\xc5\x72\x25\x95\x86\x90\x12\x63\x40\x25\x22\xe7\xc0\x6e\xad\xad\xc4\x7d\x00\x00\x63\x2e\x81\x5d\x2f\x8a\x04\x2d\x10\xb8\x08\xe3\x44\xcf\xa0\xaa\x02\xeb\xc8\xc5\x14\x4f\x47\x94\x66\x6b\x91\x42\x21\x0a\x1d\x46\x60\x28\x51\x3c\x2f\x4a\xcd\x15\xbb\x77\x8b\x30\x50\x3c\x0b\x62\x18\xf1\x9f\x18\xe8\xe1\x75\x85\x38\xee\x79\xf6\x58\xe8\xd9\x40\x8a\xac\xc8\xa3\x4e\xb7\x69\x87\xdb\xf0\xb8\x9b\x90\x82\x07\x31\x88\x37\x7e\x23\x29\x78\x44\x2b\x4a\x8d\x81\x73\x6b\xeb\xf5\xdb\x4d\x6b\x1c\xcf\x73\x6b\xc3\x2f\xd2\xa4\x71\xaf\xce\x03\xa5\x56\xeb\x54\x63\x75\x96\xc5\x52\xab\x42\xe4\x94\x0c\x79\x06\x0d\xbd\x50\x55\xcc\xcb\x07\x2f\xdf\x4b\x29\x7a\x41\x2c\x97\x85\xe6\xcb\x95\x7e\x0d\x5e\x30\xbd\x25\xeb\x1d\x26\xc2\x54\x6f\x20\x95\x42\xf3\x8d\x66\x83\xfa\x1b\xa3\x21\x83\x0b\x57\xf4\xa1\x8c\x86\x12\x89\x15\xfc\xe7\x19\x0d\x25\x16\x72\xcf\x86\x60\xb8\x8c\x29\x41\xe0\x3d\xa8\x4d\x43\x9e\xa1\x65\xa0\x37\x68\xd1\x9b\x98\x92\x0a\x69\xd5\x6b\x25\x40\x1e\x80\x3c\xfc\x7b\x90\x5d\x26\xcf\x3a\x5e\x6b\x0c\x19\x7b\x90\x5b\xa8\x51\x0b\x68\xdf\x61\x1f\x83\xd8\x8a\x15\xc3\x94\x67\x07\x60\xbc\x03\x0f\x1f\x43\x91\x59\xdf\x7e\x1f\x44\xb1\x70\x36\xfc\xb3\x46\xd8\xb9\x63\x76\xb7\xa2\xf6\xb3\x8c\x41\xce\x51\x91\x54\x6f\xd2\x24\x9d\x71\x76\xc3\xf5\x00\x17\x8e\x3c\x44\x89\xc8\x23\x4a\x8a\x0c\xce\xe4\x1c\x09\xe9\x60\xc4\x06\x46\x59\x4a\x2d\x15\x8f\x61\x82\x41\x97\xec\xb3\x4c\xa6\x77\xea\x2b\xda\xc2\xa0\xbb\x84\x20\x86\x65\xb2\x7a\xaa\x39\x78\xee\x3e\x63\xaa\xc8\x45\x66\xe1\xd1\xc3\xd1\x13\x92\xfa\x0c\x7d\x2c\xbf\x55\x0f\xd7\x1d\xc2\xdc\xf0\xdf\x14\x26\x59\x2f\x74\xf9\x31\x75\x4e\x24\xd9\x71\xfc\xef\x88\x24\xb2\x01\x74\x22\xa5\x94\x78\xf8\xb6\x0f\x90\xa0\xee\x15\xb5\xe0\x5b\xa6\xce\x9a\xbb\x48\x3c\x05\xec\x96\xff\x7a\x77\x6f\x50\x45\xe9\x8f\x44\xed\x9a\x61\xb2\x7b\xae\x6e\x7d\xbb\x66\xd7\x04\x4d\xa3\xf3\x7e\x7f\x0d\x4f\x7b\xe7\x0d\xa6\xed\x14\xfa\xc2\xf5\x4c\x4e\xed\x14\xb2\x29\xc2\x49\xdb\xad\x5d\x07\xb7\xfe\x9f\xd6\x22\x75\xd3\x2c\x6c\xc7\x95\x0b\x71\xad\xf2\x12\x2e\xab\x8a\x12\x32\xf1\x93\xc5\xed\x41\x1c\x5c\xf6\x40\x04\x7b\xde\xf7\xbc\xb4\xfc\xd6\x01\x8c\xc1\xb7\xcf\xbe\x25\x8b\x75\x5d\x85\x01\xe6\xf2\xe2\x9a\x2f\x4a\xbb\xb4\x79\xea\x71\x78\x34\xa3\xa1\x64\x21\xf3\x9c\x2b\xf6\x98\x28\x11\x06\x7a\x56\x94\x50\x94\x80\x33\x0b\xa4\x6d\x50\xe7\x5b\xfe\x9a\xd2\x83\xc8\x9f\xd5\x0d\xc8\x76\x56\x1f\x46\x59\xb7\x27\x7f\xcb\x8d\x6d\xe7\xe8\xfe\x73\xe2\x50\x3b\x08\x9d\xad\xbe\x04\xbe\x88\xa7\x0f\x41\x8a\x63\x05\x76\x9f\xff\x11\xcd\x25\x5c\x78\xa5\x9f\xa0\x78\xd3\x97\xed\x8f\x17\x4f\xa7\x8f\x5f\x81\x6d\xc4\x63\xaa\x7a\x42\x6c\xe5\xa9\x59\x7d\x73\x39\xce\xbd\xce\x28\xd9\x00\xa7\x9c\x74\x23\x4e\xda\xf9\xc6\xfe\xa8\xdc\x2e\x74\xbe\xaa\xbf\x02\x00\x00\xff\xff\xe3\xe8\xb6\x62\x33\x0a\x00\x00"

func templateGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templateGoTpl,
		"template.go.tpl",
	)
}

func templateGoTpl() (*asset, error) {
	bytes, err := templateGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.go.tpl", size: 2611, mode: os.FileMode(420), modTime: time.Unix(1596961575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.go.tpl": templateGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.go.tpl": &bintree{templateGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// template.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xd1\x6e\xe2\x38\x14\x7d\xb6\xbf\xe2\x36\x62\x57\x49\x95\xba\xef\x48\x3c\x54\xb0\x5b\x55\xda\xa5\xa8\x5b\x6d\x1f\xaa\x8a\x46\x89\x13\x32\x80\xcd\x24\x66\x86\xca\xca\xbf\x8f\xae\x6d\xc0\x40\x80\x52\xcd\x13\xe6\xda\xc7\xf7\xf8\x1c\xe3\xc3\xed\x2d\x0c\x1e\x61\xf8\xf8\x0c\x7f\x0d\x1e\x9e\xaf\xa0\x2f\x33\x0e\x05\x17\xbc\x4a\x14\xcf\x18\x5d\x24\xe9\x34\x29\x38\x68\x0d\x6c\x34\x2d\x86\xc9\x9c\x43\xd3\x50\x5a\xce\x17\xb2\x52\x10\x52\xa2\x35\x54\x89\x28\x38\xb0\x07\x53\xab\x71\x9e\x68\x7d\x03\xec\x6e\x56\x26\xf8\x15\x02\x07\x1f\x25\x6a\x02\x4d\x13\x18\x14\x17\x19\x2e\x8d\x28\xcd\x97\x22\x85\x52\x94\x2a\x8c\x40\x53\x52\xf1\xa2\xac\x15\xaf\xd8\x93\x1b\x84\x41\xc5\xf3\x20\x86\x21\xff\x89\x1b\x3d\x7f\x2c\x90\xc4\x13\xcf\x5f\x4a\x35\xe9\x4b\x91\x97\x45\xd4\x0a\xcb\x5a\x60\x83\xf3\x30\x21\x05\x0f\x62\x10\x3b\xb8\xa1\x14\x3c\xa2\x0d\xa5\x5a\x43\xc7\xd4\xba\xbd\xcd\xa4\x29\x8e\xa6\x85\xa9\xe1\x27\x6a\xa4\x70\xce\xf6\x81\x5a\x55\xcb\x54\xe1\xe9\x8c\x84\xb5\xaa\x4a\x51\x50\x32\xe0\x39\xac\xb5\x85\xa6\x61\x5e\x3f\x78\xff\x56\x4b\xd1\x0d\x62\x39\x2f\x15\x9f\x2f\xd4\x47\xf0\x8e\xed\x8d\x58\x27\x94\x08\x53\xb5\x82\x54\x0a\xc5\x57\x8a\xf5\xed\x67\x8c\x85\x1c\xae\xdd\xa1\x8f\x75\xd4\x94\x48\x3c\xc1\x9f\x5e\x51\x53\x62\x28\x77\xcd\x16\x0c\x87\x31\x25\x48\xbc\x0b\xb6\x34\xe0\x39\x56\xfa\x6a\x85\x15\xb5\x8a\x29\x69\x50\x56\xb5\xac\x04\xc8\x23\x94\x07\xbf\x8f\xb2\xeb\xe4\x55\x47\x4b\x85\x5b\xc6\x1e\xe5\x0d\xd5\x68\x43\xe8\x10\x70\xc8\x41\x6c\xcd\x8a\x21\xe3\xf9\x11\x1a\xa7\xe8\x95\xb9\x01\xf6\x7a\x20\xca\x19\x16\x5a\x08\xe3\xdd\x42\xd5\x28\x99\xc7\x20\xa7\xe8\x41\xaa\x56\x69\x92\x4e\x38\xbb\xe7\xaa\x8f\x03\x27\x17\xf2\x42\xae\x91\xd9\xf9\x4a\x4e\xcf\x6c\x49\x6a\x25\x2b\x1e\xc3\x18\x37\x9d\xb3\x7f\x64\x92\x3d\x56\xff\x61\x2d\x0c\xda\x49\x07\x31\xcc\x93\xc5\xab\x3d\xf5\x5b\xfb\x1a\xdd\x44\x6e\x67\x16\x9e\x5d\x1c\xbd\xa2\x8c\x6f\xd0\x43\x21\x36\x7e\xe1\xb8\xc5\x8a\x7b\xfe\x49\x2b\x92\xe5\x4c\xd5\x5f\xf0\xe3\x42\x85\x9d\xc0\x4e\x45\x8b\xb4\x32\x1e\xd5\x2f\xa2\xc4\x43\x12\xb9\x86\x5d\xa8\x17\x62\xbd\x6d\xb6\xbf\x28\x42\x48\x03\x00\x94\xa0\xbd\x78\x69\xec\x15\xb3\x82\x5c\x1d\xdc\xb3\xf5\x94\xb9\x0d\x33\x59\x14\xbc\x62\x2f\x49\x25\x72\x73\x80\xce\xb6\x7f\x67\xad\xd2\x1f\xdf\xa1\xac\x41\x48\x85\xd8\x52\xf0\x2c\xb0\xf2\x47\x6d\x3f\x36\x73\xd1\x1a\x4a\x7f\x24\xd5\x7e\x19\xc6\xfb\xeb\xec\x9b\xb8\x5f\x76\xaf\xa3\x5e\x5f\x87\xc3\x87\x37\xbc\xec\x01\x58\x73\xda\x66\xd3\xbf\x5c\x4d\x64\x66\xb2\xc9\xb4\x08\xc7\xde\x81\xcd\xd3\x6e\xf0\x7f\x2f\x45\xea\x32\x2e\xb4\x21\xe6\xf0\x77\x55\x51\xc3\x0d\x26\x1b\x19\xfb\x9d\x62\xbb\x0a\xb3\xcc\xcc\x46\xb0\x8b\x7b\xe2\xb5\xb1\xc5\x42\xb5\x86\x32\x07\xf6\x7f\x32\x5b\x5a\xf2\x1a\x98\x6b\x87\x63\x3e\xab\xcd\xd0\x74\xb0\xf1\x78\xba\x97\xde\x31\x34\x0c\xd4\xa4\xac\xad\x75\x82\x83\x34\xaf\x55\x8b\xbf\x78\x41\xb7\xca\xac\x19\xda\xd4\x3e\xce\xaf\x67\xbe\xf9\x53\x2e\xc0\xbd\x2c\x77\x56\x50\x93\x87\xae\x66\x2d\xf7\x2d\xbb\x3c\x0b\x29\xa6\x0b\xec\xbf\x09\x67\x1c\x96\x70\xed\x1d\xfa\xf3\xfe\x9a\xbf\x2e\x9e\x2b\x5f\xb6\xfa\xa4\x6f\x4e\xea\xad\xfa\x56\xba\x1d\xe3\x3b\xde\x9b\x28\x59\x1f\x13\x4d\xba\x38\x93\x26\xcb\xd8\x57\xce\x74\x40\xc7\xb7\xeb\x57\x00\x00\x00\xff\xff\x18\x93\xbd\x8b\x10\x0a\x00\x00"

func templateGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templateGoTpl,
		"template.go.tpl",
	)
}

func templateGoTpl() (*asset, error) {
	bytes, err := templateGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.go.tpl", size: 2576, mode: os.FileMode(420), modTime: time.Unix(1601527145, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.go.tpl": templateGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.go.tpl": &bintree{templateGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

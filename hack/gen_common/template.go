// Code generated by go-bindata.
// sources:
// template.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x41\x4f\xe3\x3c\x10\x3d\xc7\xbf\x62\x88\x3e\x7d\x4a\x50\x08\xf7\x4a\x3d\x20\xba\x48\x1c\xb6\x54\x2c\x12\x07\x84\x96\x28\x19\xbb\xde\xb6\x76\xe5\xb8\xbb\x42\x96\xff\xfb\x6a\x9c\xc4\x05\x9a\xb2\x2c\xdb\x53\x3a\xe3\x37\xf3\xde\x1b\x8f\xcf\xcf\x61\x76\x03\xf3\x9b\x3b\xf8\x32\xbb\xbe\x3b\x81\x4b\xdd\x20\x08\x54\x68\x2a\x8b\x4d\xc9\xb6\x55\xbd\xaa\x04\x82\x41\x8e\x06\x55\x8d\x8c\xc9\xcd\x56\x1b\x0b\x19\x4b\x9c\x33\x95\x12\x08\xe5\x75\x08\xb5\xde\x33\x00\x00\xe7\xce\xa0\xbc\x58\xcb\xaa\xf5\x1e\x52\xe7\xca\xc5\x4a\x2c\x2a\xbb\xf4\x3e\x25\x0c\xaa\xc6\x7b\x96\x33\xc6\x77\xaa\x06\xa9\xa4\xcd\x72\x70\x2c\x31\x28\x64\x6b\xd1\x94\xb7\xfd\x47\x96\x1a\xe4\x69\x01\x73\xfc\xe5\x5c\x79\xf7\xbc\x45\xef\x6f\x91\xdf\x4b\xbb\xbc\xd4\x8a\x4b\x91\x8f\x82\x9a\x03\xd0\xec\xcf\x20\xa5\x15\xbe\x41\xcd\xb5\xc2\x9c\x79\xc6\x9c\xfb\x8f\x22\x30\x99\x42\x9f\xa2\xd0\x62\x25\x42\x64\xb1\x12\xde\x33\x66\xe9\x44\xd7\x01\x5a\x6b\x76\xb5\x25\x4d\xf3\x6a\x83\xf4\x57\x2a\xc1\x92\x19\x72\x32\xa7\x43\x94\xb1\x0f\x3c\xfd\x68\xb5\x9a\xa4\x85\xde\x48\x8b\x9b\xad\x7d\x4e\x9f\xa8\x6d\xb0\xe7\xa8\xf6\xac\xd6\x8a\xc3\x69\xaf\x09\xb2\xc3\xba\x05\xa0\x31\xda\x04\x6f\x35\x51\xfd\x3f\xa6\x1c\x4b\x02\xb5\x09\x50\x95\x92\x3e\x0b\x96\x10\xc1\x09\x74\xa1\x19\xf2\x82\x25\x9e\xbc\xb2\x3b\xa3\x40\x17\xa0\xe4\x7a\x94\xd6\xec\xf3\xb4\x62\xf0\x9b\xd5\x06\x1f\x22\x99\x47\x98\x46\x1a\x91\x42\xe4\x35\x30\xf9\x59\x19\x78\x5d\x01\xa6\xb0\xa9\xb6\x0f\x9d\xe1\x8f\x87\xbd\xdd\xc0\x3f\x46\xae\xa4\x6a\x32\xb5\x9f\x52\x01\x0d\xf2\x6a\xb7\xb6\xed\xc8\xa4\xf2\xb1\xe9\x91\xbb\x05\xe8\x15\x39\xfc\x46\x0f\xd5\x7d\x64\x89\xe4\x94\x26\xcf\x07\x33\x83\xb3\x92\xef\x7b\x9d\x4c\x49\xd4\xcb\x33\x43\xea\xe5\x10\x5e\x5d\x4d\xe7\xd9\x70\xed\x5e\xc5\xfb\xdb\xe7\xc6\x46\x45\xf9\xec\x98\x8a\xe3\x4d\xe2\x9e\x7f\x45\xbb\xd4\x0d\xed\x79\x12\x6a\x67\xfd\x6a\xf4\xcb\x42\xd8\xab\x9d\xaa\x69\x84\xde\x67\xf1\x31\xe8\xd1\x17\x46\xb4\x70\x46\xe0\xe4\xfb\xbe\x4d\x11\x8f\xa1\x6a\xba\x74\x0e\x07\xd8\x5b\x6c\x83\x51\x1f\x83\x93\x9c\xb5\x16\x02\x4d\x79\x5f\x19\x95\xa5\x76\x29\x5b\x90\x2d\xd0\x9a\x83\xe6\xd0\xed\x6f\x70\xa0\x17\x90\xe6\x83\x03\xe4\xf8\xf0\x4a\xbd\xf1\xf7\x2f\x37\xfb\x7d\xef\x34\x9c\xc6\xee\x1f\xb6\x0e\xfa\x5f\x78\x63\x03\x07\x1a\xde\xe7\xbd\xdc\xd7\x7b\xaf\x84\xeb\x83\x92\x47\xb4\xf7\x9d\x5b\xbd\x53\x10\xa5\x84\x8d\xd2\xdd\x9b\x02\x9a\x16\x36\x2f\xff\x41\xdc\x18\x9f\x17\x13\xfa\x1d\x00\x00\xff\xff\x32\x25\x76\x67\xc0\x06\x00\x00"

func templateGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templateGoTpl,
		"template.go.tpl",
	)
}

func templateGoTpl() (*asset, error) {
	bytes, err := templateGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.go.tpl", size: 1728, mode: os.FileMode(420), modTime: time.Unix(1595133611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.go.tpl": templateGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.go.tpl": &bintree{templateGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// template.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateGoTpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\xd1\x4e\xe3\x38\x14\x7d\x8e\xbf\xe2\x12\xa1\x55\x8a\x42\x78\xaf\xd4\x07\x44\x77\x57\x48\x4b\xa9\xba\x8c\x78\x40\x08\xa2\xe4\x26\xf5\xb4\xb5\x2b\xc7\x99\x19\x64\xf9\xdf\x47\xd7\x71\x9c\x96\x16\x06\x66\x78\x0a\xd7\x3e\xbe\xe7\x1c\x1f\xdf\x5e\x5c\xc0\xf4\x16\x66\xb7\x77\xf0\xf7\xf4\xfa\xee\x04\xae\x64\x89\x50\xa3\x40\x95\x6b\x2c\x33\xb6\xcd\x8b\x55\x5e\x23\x28\xac\x50\xa1\x28\x90\x31\xbe\xd9\x4a\xa5\x21\x61\x91\x31\x2a\x17\x35\x42\x76\xed\x4a\x8d\xb5\x0c\x00\xc0\x98\x73\xc8\x2e\xd7\x3c\x6f\xac\x85\xd8\x98\x6c\xbe\xaa\xe7\xb9\x5e\x5a\x1b\x13\x06\x45\x69\x2d\x1b\x31\x56\xb5\xa2\x00\x2e\xb8\x4e\x46\x60\x58\xa4\xb0\xe6\x8d\x46\x95\x2d\xfc\x47\x12\x2b\xac\xe2\x14\x66\xf8\xdd\x98\xec\xee\x65\x8b\xd6\x2e\xb0\xba\xe7\x7a\x79\x25\x45\xc5\xeb\xd1\x51\x50\x79\x00\x9a\xfe\x1a\x24\xa4\xc0\x38\x05\xb1\x83\x9a\x49\x81\x23\x66\x19\x33\xe6\x94\x2a\x30\x9e\x80\x5f\xa2\xd2\x7c\x55\xbb\xca\x7c\x55\x5b\xcb\x98\xa6\x1d\x5d\x07\x68\xb4\x6a\x0b\x4d\x9a\x66\xf9\x06\xe9\x5f\x2e\x6a\x16\x4d\xb1\x22\x73\x3a\x44\x16\xfa\xc0\xf3\xd7\x46\x8a\x71\x9c\xca\x0d\xd7\xb8\xd9\xea\x97\xf8\x99\xda\x3a\x7b\xde\xd4\x9e\x14\x52\x54\x70\xe6\x35\x1d\x3b\xd6\xb0\x48\x12\xc3\xbf\x42\xc9\xb0\xc8\x31\x1a\x03\x81\x33\xfa\x4c\x59\x44\xbc\xc6\xd0\x95\xa6\x58\xa5\x2c\xb2\x64\x91\x6e\x95\x00\x79\x94\xc8\xf4\xd3\x44\xfc\x71\xa1\x36\x6f\x75\x32\x70\x08\xbd\x9d\xdd\xdf\x72\x05\x89\x0b\xd2\xa6\xd5\xd0\xbc\x88\x22\x5b\xdc\xdf\xb4\x1a\x7f\xb8\xe2\x53\x38\xe4\x7f\x2d\x15\xc2\x04\x36\xf9\xf6\xa1\xf3\xf8\xf1\xb0\xbb\x19\xa2\xb6\xd7\x5d\x0c\x37\x93\x42\x89\xd5\x11\xe2\x6f\x88\x21\x12\xbc\x72\x98\xc9\x04\x04\x5f\xfb\x1a\xfd\xb9\x22\xec\x45\xc8\xad\xd9\x5e\x4f\xf6\x9f\x2c\x56\xc9\x88\x45\xaf\x64\x3c\x10\x9f\x47\x98\xd0\x09\x2c\xa2\x8d\x5f\xc4\xda\x6f\xf5\xe6\xd1\x8a\x7d\x2d\xe5\x5f\x3c\x94\x92\xb7\x6b\xdd\x7c\x4e\x0f\x35\x5c\xf4\xd4\x64\x0a\x72\x45\xc9\x39\xca\xb1\x63\xb7\x18\xe8\xf1\x8a\xb6\x53\xb6\x42\x68\x28\x41\x9d\x45\x1d\x97\x93\xde\xa7\x68\x47\x8c\x5b\xda\x0d\xdb\xbe\x6d\x3e\x09\x7b\xc5\x1d\x46\x6e\x4f\xf7\xea\xf6\x8b\xfe\xf5\x99\xde\xaa\xd7\x4f\x3a\xf9\x68\x46\x7b\x16\x61\xca\xdd\xa0\x5e\xca\x92\xa6\x9c\x3b\x38\x79\xf2\x83\xc1\x8f\x0a\x42\xfe\xd3\x8a\x82\x22\x6d\x6d\x12\x46\xa1\x47\x5f\xaa\xba\x81\x73\x6b\x59\x14\x3d\x0d\x4d\xd2\xb0\x0d\x45\xd9\x2d\x8f\xe0\x00\xbb\xc0\xc6\xf9\xf8\x31\xb8\x61\xd1\x5a\xd6\x35\xaa\xec\x3e\x57\x22\x89\xf5\x92\x37\xc0\x1b\xa0\x19\x07\x92\x92\x7e\xda\xcb\xf7\xfc\xe3\x90\x32\x46\xb3\xad\x9b\xd0\x9d\xb9\x83\x45\x9f\x9b\x6a\xef\x3a\x27\xe1\x2c\xf4\xfe\xb0\x6f\xfd\x1b\x73\x3f\x2f\x8e\x02\xdd\xdb\xef\x1b\x39\x9c\xf7\xbe\x99\x5d\x91\x57\x01\x6d\x6d\xe7\x95\x37\x0a\x82\x14\x7a\x8c\xd2\x8f\x34\xe9\xe6\x59\xf6\x07\xda\x8e\xd1\x19\xae\xe7\x67\x00\x00\x00\xff\xff\x53\xba\x59\xd7\xb9\x07\x00\x00"

func templateGoTplBytes() ([]byte, error) {
	return bindataRead(
		_templateGoTpl,
		"template.go.tpl",
	)
}

func templateGoTpl() (*asset, error) {
	bytes, err := templateGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.go.tpl", size: 1977, mode: os.FileMode(420), modTime: time.Unix(1595472589, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.go.tpl": templateGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template.go.tpl": &bintree{templateGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
